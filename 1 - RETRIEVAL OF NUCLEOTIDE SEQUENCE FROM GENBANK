I} Retrieval of Nucleotide from Genbank

1) Visit  https://ncbi.nlm.nih.gov/
2) Select nucleotide and search for collagen
3) Select A.suum collagen gene 3' end, at 8 number
4) Click on FASTA
5) Copy all and click on run BLAST on R.H.S
6) paste the copied text in box
7) Click on Blast





II) Sequence similarity search using BLASTN

1) Visit  https://ncbi.nlm.nih.gov/
2) Select protein and search for (COLLAGEN) AND "Homo sapiens"
3) Select collagen, partial [Homo sapiens] at 1 number
4) Click on FASTA
5) Copy all and click on run BLAST on R.H.S
6) paste the copied text in box
7) Click on Blast





III) Sequence Similarity Search using BLASTP

https://colab.research.google.com/drive/1ITbpATAMujq5tioWzjYqmP9kAfZMW6gB?usp=sharing#scrollTo=z2KpchsPW9ja


pip install biopython


# Importing necessary library to work with biological sequences
from Bio.Seq import Seq


# Creating a DNA sequence
dna = Seq("AATTCTAGGCCGTCCTGGCGATAAAGGTGAGCCAGGTAAACATGTGCCCGGAGTTGCACCACCAGGACCA"
"CCAGGTCGACCGGGTGATATGGGACCACCTGGACCACCTGGGCCACCAGGCGAGAAAGGAAAACCTGGAA"
"CAAAAGGCCCAATAGGACCACCGGGAGACCAAGGAAATCCAGGTATTTATATTCGTAGTTAATGCTTGAT"
"TCGAGAATT")


# Generate and print the complement of the DNA sequence
print('Complement:', dna.complement())


# Generate and print the reverse complement of the DNA sequence
print('Reverse complement:', dna.reverse_complement())


# Transcribe DNA to RNA and print the RNA sequence
rna = dna.transcribe()
print('RNA:', rna)


# Translate DNA to protein and print the protein sequence
print('DNA to protein:', dna.translate())


# Translate RNA to protein and print the protein sequence
print('RNA to protein:', rna.translate())


# Import the 'random' library for random selections
import random
# Randomly choose 'H' or 'T' five times, with equal probability
random.choices("HT", weights=[0.5, 0.5], k=5)



# Import 'random' and 'numpy' for generating random sequences
import random
import numpy as np



# Function to generate a random DNA sequence of a given length
def generate_random_sequence(sequence_length, probability_distribution):
    sequence = ""  # Initialize an empty sequence
    for i in range(0, sequence_length):  # Loop through the desired length
        # Choose a random base ('A', 'C', 'G', 'T') based on the probability distribution
        sequence = sequence + random.choices(["A", "C", "G", "T"], weights=probability_distribution, k=1)[0]
    return sequence  # Return the generated sequence



# Generate a random DNA sequence of length 100 with equal probability for each base
our_random_seq = generate_random_sequence(100, [0.25, 0.25, 0.25, 0.25])
print(our_random_seq)



# Create a DNA sequence using BioPython's Seq object
my_dna = Seq("ATCGATGATAGGATA")
# Check the type of the sequence (it's a Seq object, not a regular string)
type(my_dna)


# Create a protein sequence using Seq object
my_protein = Seq("KGLYQRGD")



# Extract a subsequence from my_dna (positions 3 to 7) and get its length
a_sub_sequence = my_dna[3:7]
the_sequence_length = len(my_dna)
print(the_sequence_length, a_sub_sequence)



# Generate the reverse complement of my_dna and print it
the_rev_comp = my_dna.reverse_complement()
print(the_rev_comp)



# Transcribe my_dna to RNA
my_dna.transcribe()



# Translate my_dna to a protein
my_dna.translate()


# Function to verify if a sequence is DNA or RNA
def verify(sequence):
    '''This code verifies if a sequence is a DNA or RNA'''
    seq = set(sequence)  # Convert the sequence to a set of unique characters
    # Check if the set contains only valid DNA bases
    if seq == {"A", "T", "C", "G"}.union(seq):
        return "DNA"  # Return "DNA" if valid DNA bases
    # Check if the set contains only valid RNA bases
    elif seq == {"A", "U", "C", "G"}.union(seq):
        return "RNA"  # Return "RNA" if valid RNA bases
    else:
        return "Invalid sequence"  # Return invalid if neither DNA nor RNA



# Test the verify function with DNA, RNA, and invalid sequences
seq1 = "ATGCAGCTGTGTTACGCGAT"
seq2 = "UGGCGGAUAAGCGCA"
seq3 = "TYHGGHHHHH"
print(seq1 + " is " + verify(seq1))
print(seq2 + " is " + verify(seq2))
print(seq3 + " is " + verify(seq3))


# Function to generate the reverse complement for DNA or RNA sequences
def rev_comp_if(seq):
    comp = []  # Initialize an empty list to store complementary bases
    # Check if the sequence is DNA
    if verify(seq) == "DNA":
        # Generate the complement for each base in DNA
        for base in seq:
            if base == "A":
                comp.append("T")
            elif base == "G":
                comp.append("C")
            elif base == "T":
                comp.append("A")
            elif base == "C":
                comp.append("G")
    # Check if the sequence is RNA
    elif verify(seq) == "RNA":
        # Generate the complement for each base in RNA
        for base in seq:
            if base == "U":
                comp.append("A")
            elif base == "G":
                comp.append("C")
            elif base == "A":
                comp.append("U")
            elif base == "C":
                comp.append("G")
    else:
        return "Invalid Sequence"  # Return if the sequence is neither DNA nor RNA
    # Reverse the list of complementary bases
    comp_rev = comp[::-1]
    # Convert the list back to a string
    comp_rev = "".join(comp_rev)
    return comp_rev  # Return the reverse complement




# Test the rev_comp_if function with DNA, RNA, and invalid sequences
seq1 = "ATGCAGCTGTGTTACGCGAT"
seq2 = "UGGCGGAUAAGCGCA"
seq3 = "TYHGGHHHHH"
print("The reverse complementary strand of " + seq1 + " is " + rev_comp_if(seq1))
print("The reverse complementary strand of " + seq2 + " is " + rev_comp_if(seq2))
print("The reverse complementary strand of " + seq3 + " is " + rev_comp_if(seq3))



# Create an mRNA sequence using BioPython's Seq object
messenger_rna = Seq("AUGGCCAUUGUAAUGGGCCGCUGAAAGGGUGCCCGAUAG")
# Print the mRNA sequence
messenger_rna
# Translate the mRNA to a protein sequence
messenger_rna.translate()

